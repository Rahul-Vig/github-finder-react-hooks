{"ast":null,"code":"var _jsxFileName = \"/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\"; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.foo = () => \"Bars\";\n  }\n\n  render() {\n    const name = \"John Doe\";\n    const loading = false;\n    const showName = true; // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" Welcome to My App \"), loading ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Loading...\") : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \" \", \"Hello \", (showName ? name : null) + \"There are many \" + this.foo()));\n  } //render is a lifecycle method, it runs when the component has loaded.\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js"],"names":["React","App","Component","foo","render","name","loading","showName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAEhCC,GAFgC,GAE1B,MAAM,MAFoB;AAAA;;AAGhCC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,UAAb;AACA,UAAMC,OAAO,GAAG,KAAhB;AACA,UAAMC,QAAQ,GAAG,IAAjB,CAHO,CAKP;AACA;AACA;;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEGD,OAAO,GACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADM,GAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,YAES,CAACC,QAAQ,GAAGF,IAAH,GAAU,IAAnB,IAA2B,iBAA3B,GAA+C,KAAKF,GAAL,EAFxD,CALJ,CADF;AAaD,GAzB+B,CAyB9B;;;AAzB8B;;AA4BlC,eAAeF,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends React.Component {\n  //method part of class to be passed as jsx\n  foo = () => \"Bars\";\n  render() {\n    const name = \"John Doe\";\n    const loading = false;\n    const showName = true;\n\n    // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n\n    return (\n      <div className=\"App\">\n        <h1> Welcome to My App </h1>\n        {loading ? (\n          <h4>Loading...</h4>\n        ) : (\n          <h1>\n            {\" \"}\n            Hello {(showName ? name : null) + \"There are many \" + this.foo()}\n          </h1>\n        )}\n      </div>\n    );\n  } //render is a lifecycle method, it runs when the component has loaded.\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}