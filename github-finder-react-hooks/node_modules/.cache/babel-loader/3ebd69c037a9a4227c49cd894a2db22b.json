{"ast":null,"code":"var _jsxFileName = \"/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\"; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.foo = () => \"Bars\";\n  }\n\n  render() {\n    const name = \"John Doe\";\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \" Hello \", name + this.foo(), \" \"));\n  } //render is a lifecycle method, it runs when the component has loaded.\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js"],"names":["React","App","Component","foo","render","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAGhCC,GAHgC,GAG1B,MAAM,MAHoB;AAAA;;AAIhCC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,UAAb;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAYA,IAAI,GAAG,KAAKF,GAAL,EAAnB,MADF,CADF;AAKD,GAX+B,CAW9B;;;AAX8B;;AAclC,eAAeF,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends React.Component {\n  //method part of class to be passed as jsx\n\n  foo = () => \"Bars\";\n  render() {\n    const name = \"John Doe\";\n    return (\n      <div className=\"App\">\n        <h1> Hello {name + this.foo()} </h1>\n      </div>\n    );\n  } //render is a lifecycle method, it runs when the component has loaded.\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}