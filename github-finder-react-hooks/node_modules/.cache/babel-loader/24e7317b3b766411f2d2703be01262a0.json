{"ast":null,"code":"var _jsxFileName = \"/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js\";\nimport React, { Fragment, Component } from \"react\";\nimport \"./App.css\"; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.foo = () => \"Bars\";\n  }\n\n  render() {\n    const name = \"John Doe\";\n    const loading = false;\n    const showName = true; // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \" \");\n    {} //render is a lifecycle method, it runs when the component has loaded.\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js"],"names":["React","Fragment","Component","App","foo","render","name","loading","showName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AAAA;AAAA;;AAAA,SAE1BE,GAF0B,GAEpB,MAAM,MAFc;AAAA;;AAG1BC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,UAAb;AACA,UAAMC,OAAO,GAAG,KAAhB;AACA,UAAMC,QAAQ,GAAG,IAAjB,CAHO,CAKP;AACA;AACA;;AAEA,WAAO;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACA,KACC,CAXM,CAWL;AACH;;AAfyB;;AAkB5B,eAAeL,GAAf","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport \"./App.css\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends Component {\n  //method part of class to be passed as jsx\n  foo = () => \"Bars\";\n  render() {\n    const name = \"John Doe\";\n    const loading = false;\n    const showName = true;\n\n    // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n\n    return <div className=\"App\"> </div>;\n    {\n    } //render is a lifecycle method, it runs when the component has loaded.\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}