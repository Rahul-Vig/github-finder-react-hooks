{"ast":null,"code":"var _jsxFileName = \"/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js\";\nimport React, { Fragment, Component } from \"react\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport axios from \"axios\";\nimport \"./App.css\"; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends Component {\n  //method part of class to be passed as jsx\n  // foo = () => \"Bars\";\n  async componentDidMount() {\n    const res = await axios.get(\"https://api.github.com/users\").then(res => console.log(res.data));\n  }\n\n  render() {\n    // const name = \"John Doe\";\n    // const loading = false;\n    // const showName = true;\n    // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \" \", React.createElement(Navbar, {\n      title: \"Github Finder\",\n      icon: \"fab fa-github\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Users, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }))); // return (\n    //   <Fragment>\n    //     <h1> Welcome to My App </h1>\n    //     {loading ? (\n    //       <h4>Loading...</h4>\n    //     ) : (\n    //       <h1>\n    //         Hello {showName ? name : null} <br />{\" \"}\n    //         {/*You can also just do showName && name*/}\n    //         {\"There are many \" + this.foo()}\n    //       </h1>\n    //     )}\n    //   </Fragment>\n    // );\n  }\n\n} //render is a lifecycle method, it runs when the component has loaded.\n\n\nexport default App;","map":{"version":3,"sources":["/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js"],"names":["React","Fragment","Component","Navbar","Users","axios","App","componentDidMount","res","get","then","console","log","data","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1B;AACA;AAEA,QAAMK,iBAAN,GAA0B;AACxB,UAAMC,GAAG,GAAG,MAAMH,KAAK,CACpBI,GADe,CACX,8BADW,EAEfC,IAFe,CAEVF,GAAG,IAAIG,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAhB,CAFG,CAAlB;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AAEA;AACA;AACA;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,EAEE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,eAAd;AAA8B,MAAA,IAAI,EAAC,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CADF,CATO,CAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AA5CyB,C,CA6C1B;;;AAEF,eAAeR,GAAf","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends Component {\n  //method part of class to be passed as jsx\n  // foo = () => \"Bars\";\n\n  async componentDidMount() {\n    const res = await axios\n      .get(\"https://api.github.com/users\")\n      .then(res => console.log(res.data));\n  }\n\n  render() {\n    // const name = \"John Doe\";\n    // const loading = false;\n    // const showName = true;\n\n    // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n\n    return (\n      <div className=\"App\">\n        {\" \"}\n        <Navbar title=\"Github Finder\" icon=\"fab fa-github\" />\n        <div className=\"container\">\n          <Users />\n        </div>\n        {/*you can pass in values for our properties, as shown here with title */}\n      </div>\n    );\n\n    // return (\n    //   <Fragment>\n    //     <h1> Welcome to My App </h1>\n    //     {loading ? (\n    //       <h4>Loading...</h4>\n    //     ) : (\n    //       <h1>\n    //         Hello {showName ? name : null} <br />{\" \"}\n    //         {/*You can also just do showName && name*/}\n    //         {\"There are many \" + this.foo()}\n    //       </h1>\n    //     )}\n    //   </Fragment>\n    // );\n  }\n} //render is a lifecycle method, it runs when the component has loaded.\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}