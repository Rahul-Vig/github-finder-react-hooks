{"ast":null,"code":"import _slicedToArray from \"/home/rahulvig/Desktop/React Udemy/github-finder-react-hooks/github-finder-react-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rahulvig/Desktop/React Udemy/github-finder-react-hooks/github-finder-react-hooks/src/App.js\";\nimport React, { Fragment, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport Search from \"./components/users/Search\";\nimport Alert from \"./components/layout/Alert\";\nimport About from \"./components/pages/About\";\nimport User from \"./components/users/User\";\nimport axios from \"axios\";\nimport GithubState from \"./context/github/GithubState\";\nimport \"./App.css\";\n\nconst App = () => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        alert = _useState6[0],\n        setAlert = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        repos = _useState8[0],\n        setRepos = _useState8[1]; //Search Github Users\n  //Clear users from state\n  //Get single github user\n\n\n  const getUser = async username => {\n    setLoading(true);\n    const res = await axios.get(\"https://api.github.com/users/\".concat(username, \"?client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET)); //console.log(res.data);\n\n    setUser(res.data);\n    setLoading(false);\n  }; //Get users repos\n\n\n  const getUserRepos = async username => {\n    setLoading(true);\n    const res = await axios.get(\"https://api.github.com/users/\".concat(username, \"/repos?sort=created:asc&client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET)); //console.log(res.data);\n\n    setRepos(res.data);\n    setLoading(false);\n  }; //Set alert upon improper usage\n\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg,\n      type\n    });\n    setTimeout(() => setAlert(null), 5000);\n  };\n\n  return React.createElement(GithubState, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \" \", React.createElement(Navbar, {\n    title: \"Github Finder\",\n    icon: \"fab fa-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Alert, {\n    alert: alert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: props => React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Search, {\n      setAlert: showAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Users, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })), React.createElement(Route, {\n    exact: true,\n    path: \"/about\",\n    component: About,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/user/:login\",\n    render: props => React.createElement(User, Object.assign({}, props, {\n      getUser: getUser,\n      getUserRepos: getUserRepos,\n      repos: repos,\n      user: user,\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))))); // return (\n  //   <Fragment>\n  //     <h1> Welcome to My App </h1>\n  //     {loading ? (\n  //       <h4>Loading...</h4>\n  //     ) : (\n  //       <h1>\n  //         Hello {showName ? name : null} <br />{\" \"}\n  //         {/*You can also just do showName && name*/}\n  //         {\"There are many \" + this.foo()}\n  //       </h1>\n  //     )}\n  //   </Fragment>\n  // );\n}; //render is a lifecycle method, it runs when the component has loaded.\n\n\nexport default App;","map":{"version":3,"sources":["/home/rahulvig/Desktop/React Udemy/github-finder-react-hooks/github-finder-react-hooks/src/App.js"],"names":["React","Fragment","useState","BrowserRouter","Router","Switch","Route","Navbar","Users","Search","Alert","About","User","axios","GithubState","App","user","setUser","loading","setLoading","alert","setAlert","repos","setRepos","getUser","username","res","get","process","env","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","data","getUserRepos","showAlert","msg","type","setTimeout","props"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport Search from \"./components/users/Search\";\nimport Alert from \"./components/layout/Alert\";\nimport About from \"./components/pages/About\";\nimport User from \"./components/users/User\";\nimport axios from \"axios\";\nimport GithubState from \"./context/github/GithubState\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState(null);\n  const [repos, setRepos] = useState([]);\n\n  //Search Github Users\n\n  //Clear users from state\n\n  //Get single github user\n  const getUser = async username => {\n    setLoading(true);\n    const res = await axios.get(\n      `https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    //console.log(res.data);\n    setUser(res.data);\n    setLoading(false);\n  };\n\n  //Get users repos\n  const getUserRepos = async username => {\n    setLoading(true);\n    const res = await axios.get(\n      `https://api.github.com/users/${username}/repos?sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    //console.log(res.data);\n    setRepos(res.data);\n    setLoading(false);\n  };\n\n  //Set alert upon improper usage\n  const showAlert = (msg, type) => {\n    setAlert({ msg, type });\n    setTimeout(() => setAlert(null), 5000);\n  };\n\n  return (\n    <GithubState>\n      <Router>\n        <div className=\"App\">\n          {\" \"}\n          <Navbar title=\"Github Finder\" icon=\"fab fa-github\" />\n          <div className=\"container\">\n            <Alert alert={alert} />\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={props => (\n                  <Fragment>\n                    <Search setAlert={showAlert} />\n                    <Users />\n                  </Fragment>\n                )}\n              />\n            </Switch>\n            <Route exact path=\"/about\" component={About} />\n            <Route\n              exact\n              path=\"/user/:login\"\n              render={props => (\n                <User\n                  {...props}\n                  getUser={getUser}\n                  getUserRepos={getUserRepos}\n                  repos={repos}\n                  user={user}\n                  loading={loading}\n                />\n              )}\n            />\n          </div>\n          {/*you can pass in values for our properties, as shown here with title */}\n        </div>\n      </Router>\n    </GithubState>\n  );\n\n  // return (\n  //   <Fragment>\n  //     <h1> Welcome to My App </h1>\n  //     {loading ? (\n  //       <h4>Loading...</h4>\n  //     ) : (\n  //       <h1>\n  //         Hello {showName ? name : null} <br />{\" \"}\n  //         {/*You can also just do showName && name*/}\n  //         {\"There are many \" + this.foo()}\n  //       </h1>\n  //     )}\n  //   </Fragment>\n  // );\n}; //render is a lifecycle method, it runs when the component has loaded.\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}