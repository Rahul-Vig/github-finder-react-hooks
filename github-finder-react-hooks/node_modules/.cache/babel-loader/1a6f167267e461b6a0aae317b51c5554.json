{"ast":null,"code":"var _jsxFileName = \"/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js\";\nimport React, { Fragment, Component } from \"react\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport axios from \"axios\";\nimport \"./App.css\"; // function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      loading: false //loading needed while data is being loaded.\n\n    };\n  }\n\n  async componentDidMount() {\n    console.log(process.env.REACT_APP_GITHUB_CLIENT_SECRET);\n    this.setState({\n      loading: true\n    });\n    const res = await axios.get(\"https://api.github.com/users?client_id=\".concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n    console.log(res.data);\n    this.setState({\n      users: res.data,\n      loading: false\n    });\n  }\n\n  render() {\n    // const name = \"John Doe\";\n    // const loading = false;\n    // const showName = true;\n    // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \" \", React.createElement(Navbar, {\n      title: \"Github Finder\",\n      icon: \"fab fa-github\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Users, {\n      loading: this.state.loading,\n      users: this.state.users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }))); // return (\n    //   <Fragment>\n    //     <h1> Welcome to My App </h1>\n    //     {loading ? (\n    //       <h4>Loading...</h4>\n    //     ) : (\n    //       <h1>\n    //         Hello {showName ? name : null} <br />{\" \"}\n    //         {/*You can also just do showName && name*/}\n    //         {\"There are many \" + this.foo()}\n    //       </h1>\n    //     )}\n    //   </Fragment>\n    // );\n  }\n\n} //render is a lifecycle method, it runs when the component has loaded.\n\n\nexport default App;","map":{"version":3,"sources":["/home/rahulvig/Desktop/React Udemy/github-finder/src/App.js"],"names":["React","Fragment","Component","Navbar","Users","axios","App","state","users","loading","componentDidMount","console","log","process","env","REACT_APP_GITHUB_CLIENT_SECRET","setState","res","get","REACT_APP_GITHUB_CLIENT_ID","data","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAI1BK,KAJ0B,GAIlB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE,KAFH,CAES;;AAFT,KAJkB;AAAA;;AAS1B,QAAMC,iBAAN,GAA0B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,8BAAxB;AACA,SAAKC,QAAL,CAAc;AAAEP,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,UAAMQ,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,kDAEdL,OAAO,CAACC,GAAR,CAAYK,0BAFE,4BAGEN,OAAO,CAACC,GAAR,CAAYC,8BAHd,EAAlB;AAKAJ,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACG,IAAhB;AACA,SAAKJ,QAAL,CAAc;AAAER,MAAAA,KAAK,EAAES,GAAG,CAACG,IAAb;AAAmBX,MAAAA,OAAO,EAAE;AAA5B,KAAd;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AAEA;AACA;AACA;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,EAEE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,eAAd;AAA8B,MAAA,IAAI,EAAC,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWE,OAA3B;AAAoC,MAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CADF,CATO,CAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAvDyB,C,CAwD1B;;;AAEF,eAAeF,GAAf","sourcesContent":["import React, { Fragment, Component } from \"react\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> Hello from React </h1>\n//     </div>\n//   );\n// }\n\n//You can put any js expression in the {} when rendering html elements. {name} is one example,\n//can also do {1+1} and it will evaluate on the actual webpage as 2.\n//other examples: {name.toUpperCase()}\n\n//Can use expressions in JSX and pass functions, variables etc.\n\nclass App extends Component {\n  //method part of class to be passed as jsx\n  // foo = () => \"Bars\";\n\n  state = {\n    users: [],\n    loading: false //loading needed while data is being loaded.\n  };\n\n  async componentDidMount() {\n    console.log(process.env.REACT_APP_GITHUB_CLIENT_SECRET);\n    this.setState({ loading: true });\n    const res = await axios.get(\n      `https://api.github.com/users?client_id=${\n        process.env.REACT_APP_GITHUB_CLIENT_ID\n      }&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    console.log(res.data);\n    this.setState({ users: res.data, loading: false });\n  }\n\n  render() {\n    // const name = \"John Doe\";\n    // const loading = false;\n    // const showName = true;\n\n    // if (loading) {\n    //   return <h4>Loading....</h4>;\n    // }\n\n    return (\n      <div className=\"App\">\n        {\" \"}\n        <Navbar title=\"Github Finder\" icon=\"fab fa-github\" />\n        <div className=\"container\">\n          <Users loading={this.state.loading} users={this.state.users} />\n        </div>\n        {/*you can pass in values for our properties, as shown here with title */}\n      </div>\n    );\n\n    // return (\n    //   <Fragment>\n    //     <h1> Welcome to My App </h1>\n    //     {loading ? (\n    //       <h4>Loading...</h4>\n    //     ) : (\n    //       <h1>\n    //         Hello {showName ? name : null} <br />{\" \"}\n    //         {/*You can also just do showName && name*/}\n    //         {\"There are many \" + this.foo()}\n    //       </h1>\n    //     )}\n    //   </Fragment>\n    // );\n  }\n} //render is a lifecycle method, it runs when the component has loaded.\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}